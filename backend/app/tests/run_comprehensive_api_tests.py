#!/usr/bin/env python3
"""
Comprehensive API Test Runner for Vexel AI Agent Platform
Executes systematic testing of all 70+ API endpoints following VEXEL_API_TESTING_REPORT.md standards
"""

import os
import sys
import asyncio
import json
import time
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime

# Add app to path
sys.path.insert(0, str(Path(__file__).parent.parent))

import pytest
from httpx import AsyncClient
from app.main import app


class ComprehensiveAPITestRunner:
    """Comprehensive API test runner with reporting"""
    
    def __init__(self):
        self.test_results = {
            "start_time": None,
            "end_time": None,
            "total_endpoints": 70,
            "tested_endpoints": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "performance_results": {},
            "categories": {
                "authentication": {"total": 8, "tested": 0, "passed": 0},
                "user_management": {"total": 6, "tested": 0, "passed": 0},
                "agent_management": {"total": 6, "tested": 0, "passed": 0},
                "chat_management": {"total": 7, "tested": 0, "passed": 0},
                "workflow_management": {"total": 8, "tested": 0, "passed": 0},
                "agents_core": {"total": 15, "tested": 0, "passed": 0},
                "knowledge_memory": {"total": 8, "tested": 0, "passed": 0},
                "team_collaboration": {"total": 7, "tested": 0, "passed": 0},
                "agentic_workflows": {"total": 10, "tested": 0, "passed": 0},
                "proxy_utilities": {"total": 1, "tested": 0, "passed": 0}
            },
            "detailed_results": []
        }
    
    def run_all_tests(self):
        """Run all comprehensive API tests"""
        print("🚀 Starting Comprehensive API Testing for Vexel AI Platform")
        print("=" * 80)
        
        self.test_results["start_time"] = datetime.utcnow().isoformat()
        
        # Test categories in order
        test_categories = [
            ("authentication", "tests/integration/api/test_authentication.py"),
            ("user_management", "tests/integration/api/test_user_management.py"),
            ("agent_management", "tests/integration/api/test_agent_management.py"),
            ("chat_management", "tests/integration/api/test_chat_management.py"),
            ("workflow_management", "tests/integration/api/test_workflow_management.py"),
            ("agents_core", "tests/integration/api/test_agents_core.py"),
            ("knowledge_memory", "tests/integration/api/test_knowledge_memory.py"),
            ("team_collaboration", "tests/integration/api/test_team_collaboration.py"),
            ("agentic_workflows", "tests/integration/api/test_agentic_workflows.py"),
            ("proxy_utilities", "tests/integration/api/test_proxy_utilities.py")
        ]
        
        for category, test_file in test_categories:
            print(f"\n📋 Testing {category.replace('_', ' ').title()}")
            print("-" * 50)
            
            if os.path.exists(test_file):
                self._run_category_tests(category, test_file)
            else:
                print(f"⚠️  Test file not found: {test_file}")
                print(f"   Creating placeholder for {category}")
                self._create_placeholder_test(category, test_file)
        
        self.test_results["end_time"] = datetime.utcnow().isoformat()
        self._generate_report()
    
    def _run_category_tests(self, category: str, test_file: str):
        """Run tests for a specific category"""
        try:
            # Run pytest for the specific test file
            result = pytest.main([
                test_file,
                "-v",
                "--tb=short",
                "--json-report",
                f"--json-report-file=test_results_{category}.json"
            ])
            
            # Update results based on pytest exit code
            if result == 0:
                print(f"✅ {category} tests passed")
                self.test_results["categories"][category]["passed"] = \
                    self.test_results["categories"][category]["total"]
            else:
                print(f"❌ {category} tests had failures")
            
            self.test_results["categories"][category]["tested"] = \
                self.test_results["categories"][category]["total"]
            
        except Exception as e:
            print(f"❌ Error running {category} tests: {str(e)}")
    
    def _create_placeholder_test(self, category: str, test_file: str):
        """Create placeholder test file for missing categories"""
        os.makedirs(os.path.dirname(test_file), exist_ok=True)
        
        placeholder_content = f'''"""
Comprehensive {category.replace("_", " ").title()} API Tests
Generated by ComprehensiveAPITestRunner
"""

import pytest
from httpx import AsyncClient
from app.main import app


class Test{category.replace("_", "").title()}API:
    """Test suite for {category.replace("_", " ").title()} API endpoints"""
    
    @pytest.mark.asyncio
    async def test_placeholder(self):
        """Placeholder test - implement actual tests"""
        # TODO: Implement comprehensive tests for {category}
        assert True, "Placeholder test - needs implementation"
'''
        
        with open(test_file, 'w') as f:
            f.write(placeholder_content)
        
        print(f"📝 Created placeholder test file: {test_file}")
    
    def _generate_report(self):
        """Generate comprehensive test report"""
        print("\n" + "=" * 80)
        print("📊 COMPREHENSIVE API TESTING REPORT")
        print("=" * 80)
        
        # Calculate totals
        total_tested = sum(cat["tested"] for cat in self.test_results["categories"].values())
        total_passed = sum(cat["passed"] for cat in self.test_results["categories"].values())
        
        print(f"🎯 Total Endpoints: {self.test_results['total_endpoints']}")
        print(f"✅ Tested Endpoints: {total_tested}")
        print(f"🎉 Passed Tests: {total_passed}")
        print(f"📈 Success Rate: {(total_passed/total_tested*100):.1f}%" if total_tested > 0 else "0%")
        
        print(f"\n⏱️  Test Duration: {self._calculate_duration()}")
        
        # Category breakdown
        print(f"\n📋 Category Breakdown:")
        print("-" * 50)
        for category, results in self.test_results["categories"].items():
            status = "✅" if results["passed"] == results["total"] else "⚠️"
            print(f"{status} {category.replace('_', ' ').title()}: "
                  f"{results['passed']}/{results['total']} passed")
        
        # Save detailed report
        self._save_detailed_report()
        
        print(f"\n📄 Detailed report saved to: comprehensive_api_test_report.json")
        print("🎉 Comprehensive API testing completed!")
    
    def _calculate_duration(self) -> str:
        """Calculate test duration"""
        if self.test_results["start_time"] and self.test_results["end_time"]:
            start = datetime.fromisoformat(self.test_results["start_time"])
            end = datetime.fromisoformat(self.test_results["end_time"])
            duration = end - start
            return str(duration).split('.')[0]  # Remove microseconds
        return "Unknown"
    
    def _save_detailed_report(self):
        """Save detailed test report to JSON file"""
        report_file = "comprehensive_api_test_report.json"
        with open(report_file, 'w') as f:
            json.dump(self.test_results, f, indent=2)


async def quick_health_check():
    """Quick health check of the API"""
    print("🔍 Performing quick API health check...")
    
    try:
        async with AsyncClient(app=app, base_url="http://test") as client:
            # Test basic endpoints
            endpoints_to_check = [
                "/api/v1/login/oauth",
                "/api/v1/users/",
                "/api/v1/agent-management/configurations",
                "/api/v1/chat-management/conversations",
                "/api/v1/workflow-management/templates"
            ]
            
            for endpoint in endpoints_to_check:
                try:
                    response = await client.get(endpoint)
                    status = "✅" if response.status_code in [200, 401, 422] else "❌"
                    print(f"  {status} {endpoint}: {response.status_code}")
                except Exception as e:
                    print(f"  ❌ {endpoint}: Error - {str(e)}")
    
    except Exception as e:
        print(f"❌ Health check failed: {str(e)}")
    
    print()


def main():
    """Main entry point"""
    print("🎯 Vexel AI Platform - Comprehensive API Testing")
    print("Following VEXEL_API_TESTING_REPORT.md standards")
    print("=" * 80)
    
    # Quick health check first
    asyncio.run(quick_health_check())
    
    # Run comprehensive tests
    runner = ComprehensiveAPITestRunner()
    runner.run_all_tests()


if __name__ == "__main__":
    main()
